require('./styles.less');
var inherits = require('util').inherits;
var getText = require('getText').getText;
var Selector = require('Selector');
var serverConstants = require('ServersData').serverConstants;
var Button = require('Button').DofusButton;
var Window = require('Window');
var timeManager = require('timeManager');
var windowsManager = require('windowsManager');

var quarters = {
	0: 0,
	30: 2
};


function PrismVulnerabilityDateWindow() {
	Window.call(this, {
		title: getText('ui.zaap.prism'),
		className: 'PrismVulnerabilityDateWindow',
		positionInfo: { left: 'c', top: 'c', width: 400, height: 256 }
	});

	var subareaName, explanation, hours, minutes, save, cancel;
	var prism;
	var selectedHour, selectedMinute;

	this.once('open', function () {
		subareaName = this.windowBody.createChild('div', { className: 'subAreaName' });
		explanation = this.windowBody.createChild('div', { className: 'explanation' });

		var selectorBox = this.windowBody.createChild('div', { className: 'selectorBox' });

		hours = selectorBox.appendChild(new Selector({ className: 'hours' }));
		hours.on('change', function (value) {
			selectedHour = value;
		});
		for (var i = 0; i < 10; i += 1) {
			hours.addOption('0' + i, i);
		}

		for (i = 10; i < 24; i += 1) {
			hours.addOption(i, i);
		}

		minutes = selectorBox.appendChild(new Selector({ className: 'minutes' }));
		minutes.on('change', function (value) {
			selectedMinute = value;
		});
		minutes.addOption('00', quarters[0]);
		minutes.addOption('30', quarters[30]);

		var self = this;
		var buttonBox = this.windowBody.createChild('div', { className: 'buttonBox' });
		save = buttonBox.appendChild(new Button(getText('ui.common.save')));
		save.on('tap', function () {
			var tzo = timeManager.time.timezoneOffset;
			var tzoMinutes = ((tzo / 1000) * 60) % 60;
			var tzoHours = (tzo / (1000 * 60 * 60)) % 24;
			var result = (selectedHour - tzoHours) * 4 + (selectedMinute - tzoMinutes);
			if (result < 0) {
				result += 96;
			}

			window.dofus.sendMessage('PrismSettingsRequestMessage', {
				subAreaId: prism.subAreaId,
				startDefenseTime: result
			});

			windowsManager.close(self.id);
		});

		cancel = buttonBox.appendChild(new Button(getText('ui.common.cancel')));
		cancel.on('tap', function () {
			windowsManager.close(self.id);
		});
	});

	this.on('open', function (params) {
		prism = params.prism;
		var nextVulnerabilityDate = params.vulnerableTime.getServerDate();
		var vulString = nextVulnerabilityDate.toString();

		var enrichData = prism.enrichData;

		subareaName.setText(enrichData.subAreaName + ' (' + enrichData.areaName + ')');

		var duration = window.gui.serversData.sessionConstants[serverConstants.SERVER_CONST_KOH_DURATION];

		explanation.setText(getText('ui.prism.vulnerabilityHourInfos',
			Math.round(duration / 1000 / 360) / 10,
			vulString.hour,
			vulString.minute
		));

		hours.select(nextVulnerabilityDate.hour);
		minutes.select(quarters[nextVulnerabilityDate.minute] || quarters[0]);
	});
}
inherits(PrismVulnerabilityDateWindow, Window);
module.exports = PrismVulnerabilityDateWindow;



/*****************
 ** WEBPACK FOOTER
 ** ./src/views/ui/windows/SocialWindow/AllianceTab/PrismVulnerabilityDateWindow/index.js
 ** module id = 758
 ** module chunks = 0
 **/